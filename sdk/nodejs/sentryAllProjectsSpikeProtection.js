"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SentryAllProjectsSpikeProtection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Enable spike protection for all projects in an organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sentry from "@pulumi/sentry";
 * import * as sentry from "@pulumiverse/sentry";
 *
 * // Enable spike protection for several projects in a Sentry organization.
 * const web_app = new sentry.SentryProject("web-app", {
 *     organization: "my-organization",
 *     teams: ["my-first-team"],
 *     slug: "web-app",
 *     platform: "go",
 * });
 * const mobile_app = new sentry.SentryProject("mobile-app", {
 *     organization: "my-organization",
 *     teams: ["my-second-team"],
 *     slug: "mobile-app",
 *     platform: "android",
 * });
 * const mainSentryAllProjectsSpikeProtection = new sentry.SentryAllProjectsSpikeProtection("mainSentryAllProjectsSpikeProtection", {
 *     organization: "my-organization",
 *     projects: [
 *         web_app.id,
 *         mobile_app.id,
 *     ],
 *     enabled: true,
 * });
 * const all = sentry.getSentryAllProjects({
 *     organization: "my-organization",
 * });
 * const mainIndex_sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection = new sentry.SentryAllProjectsSpikeProtection("mainIndex/sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection", {
 *     organization: all.then(all => all.organization),
 *     projects: all.then(all => all.projectSlugs),
 *     enabled: true,
 * });
 * ```
 */
class SentryAllProjectsSpikeProtection extends pulumi.CustomResource {
    /**
     * Get an existing SentryAllProjectsSpikeProtection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SentryAllProjectsSpikeProtection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SentryAllProjectsSpikeProtection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SentryAllProjectsSpikeProtection.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["projects"] = state ? state.projects : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.projects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projects'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["projects"] = args ? args.projects : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SentryAllProjectsSpikeProtection.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SentryAllProjectsSpikeProtection = SentryAllProjectsSpikeProtection;
/** @internal */
SentryAllProjectsSpikeProtection.__pulumiType = 'sentry:index/sentryAllProjectsSpikeProtection:SentryAllProjectsSpikeProtection';
//# sourceMappingURL=sentryAllProjectsSpikeProtection.js.map