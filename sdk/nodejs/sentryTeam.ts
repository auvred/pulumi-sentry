// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # sentry.SentryTeam Resource
 *
 * Sentry Team resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sentry from "@pulumi/sentry";
 *
 * // Create a team
 * const defaultSentryTeam = new sentry.SentryTeam("default", {
 *     organization: "my-organization",
 *     slug: "my-team",
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using an ID made up of the organization slug and project slugbash
 *
 * ```sh
 *  $ pulumi import sentry:index/sentryTeam:SentryTeam default org-slug/team-slug
 * ```
 */
export class SentryTeam extends pulumi.CustomResource {
    /**
     * Get an existing SentryTeam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SentryTeamState, opts?: pulumi.CustomResourceOptions): SentryTeam {
        return new SentryTeam(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sentry:index/sentryTeam:SentryTeam';

    /**
     * Returns true if the given object is an instance of SentryTeam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SentryTeam {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SentryTeam.__pulumiType;
    }

    public /*out*/ readonly hasAccess!: pulumi.Output<boolean>;
    public /*out*/ readonly isMember!: pulumi.Output<boolean>;
    public /*out*/ readonly isPending!: pulumi.Output<boolean>;
    /**
     * The human readable name for the team.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The slug of the organization the team should be created for.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The unique URL slug for this team. If this is not provided a slug is automatically generated based on the name.
     */
    public readonly slug!: pulumi.Output<string>;
    public /*out*/ readonly teamId!: pulumi.Output<string>;

    /**
     * Create a SentryTeam resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SentryTeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SentryTeamArgs | SentryTeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SentryTeamState | undefined;
            resourceInputs["hasAccess"] = state ? state.hasAccess : undefined;
            resourceInputs["isMember"] = state ? state.isMember : undefined;
            resourceInputs["isPending"] = state ? state.isPending : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as SentryTeamArgs | undefined;
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["hasAccess"] = undefined /*out*/;
            resourceInputs["isMember"] = undefined /*out*/;
            resourceInputs["isPending"] = undefined /*out*/;
            resourceInputs["teamId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SentryTeam.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SentryTeam resources.
 */
export interface SentryTeamState {
    hasAccess?: pulumi.Input<boolean>;
    isMember?: pulumi.Input<boolean>;
    isPending?: pulumi.Input<boolean>;
    /**
     * The human readable name for the team.
     */
    name?: pulumi.Input<string>;
    /**
     * The slug of the organization the team should be created for.
     */
    organization?: pulumi.Input<string>;
    /**
     * The unique URL slug for this team. If this is not provided a slug is automatically generated based on the name.
     */
    slug?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SentryTeam resource.
 */
export interface SentryTeamArgs {
    /**
     * The human readable name for the team.
     */
    name?: pulumi.Input<string>;
    /**
     * The slug of the organization the team should be created for.
     */
    organization: pulumi.Input<string>;
    /**
     * The unique URL slug for this team. If this is not provided a slug is automatically generated based on the name.
     */
    slug?: pulumi.Input<string>;
}
