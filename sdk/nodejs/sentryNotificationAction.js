"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SentryNotificationAction = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Create a Spike Protection Notification Action. See the [Sentry Documentation](https://docs.sentry.io/api/alerts/create-a-spike-protection-notification-action/) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sentry from "@pulumiverse/sentry";
 *
 * const defaultSentryProject = new sentry.SentryProject("defaultSentryProject", {
 *     organization: "my-organization",
 *     teams: [
 *         "my-first-team",
 *         "my-second-team",
 *     ],
 *     platform: "javascript",
 * });
 * // Create a notification action for the project
 * const defaultSentryNotificationAction = new sentry.SentryNotificationAction("defaultSentryNotificationAction", {
 *     organization: defaultSentryProject.organization,
 *     triggerType: "spike-protection",
 *     serviceType: "sentry_notification",
 *     targetIdentifier: "default",
 *     targetDisplay: "default",
 *     projects: [defaultSentryProject.id],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import sentry:index/sentryNotificationAction:SentryNotificationAction default org-slug/action-id
 * ```
 */
class SentryNotificationAction extends pulumi.CustomResource {
    /**
     * Get an existing SentryNotificationAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SentryNotificationAction(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SentryNotificationAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SentryNotificationAction.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["projects"] = state ? state.projects : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["targetDisplay"] = state ? state.targetDisplay : undefined;
            resourceInputs["targetIdentifier"] = state ? state.targetIdentifier : undefined;
            resourceInputs["triggerType"] = state ? state.triggerType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.projects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projects'");
            }
            if ((!args || args.serviceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceType'");
            }
            if ((!args || args.triggerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerType'");
            }
            resourceInputs["integrationId"] = args ? args.integrationId : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["projects"] = args ? args.projects : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["targetDisplay"] = args ? args.targetDisplay : undefined;
            resourceInputs["targetIdentifier"] = args ? args.targetIdentifier : undefined;
            resourceInputs["triggerType"] = args ? args.triggerType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SentryNotificationAction.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SentryNotificationAction = SentryNotificationAction;
/** @internal */
SentryNotificationAction.__pulumiType = 'sentry:index/sentryNotificationAction:SentryNotificationAction';
//# sourceMappingURL=sentryNotificationAction.js.map