// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SentryDefaultKey extends pulumi.CustomResource {
    /**
     * Get an existing SentryDefaultKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SentryDefaultKeyState, opts?: pulumi.CustomResourceOptions): SentryDefaultKey {
        return new SentryDefaultKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sentry:index/sentryDefaultKey:SentryDefaultKey';

    /**
     * Returns true if the given object is an instance of SentryDefaultKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SentryDefaultKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SentryDefaultKey.__pulumiType;
    }

    public /*out*/ readonly dsnCsp!: pulumi.Output<string>;
    public /*out*/ readonly dsnPublic!: pulumi.Output<string>;
    public /*out*/ readonly dsnSecret!: pulumi.Output<string>;
    public /*out*/ readonly isActive!: pulumi.Output<boolean>;
    /**
     * The name of the key
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The slug of the organization the key should be created for
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The slug of the project the key should be created for
     */
    public readonly project!: pulumi.Output<string>;
    public /*out*/ readonly projectId!: pulumi.Output<number>;
    public /*out*/ readonly public!: pulumi.Output<string>;
    public readonly rateLimitCount!: pulumi.Output<number>;
    public readonly rateLimitWindow!: pulumi.Output<number>;
    public /*out*/ readonly secret!: pulumi.Output<string>;

    /**
     * Create a SentryDefaultKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SentryDefaultKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SentryDefaultKeyArgs | SentryDefaultKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SentryDefaultKeyState | undefined;
            resourceInputs["dsnCsp"] = state ? state.dsnCsp : undefined;
            resourceInputs["dsnPublic"] = state ? state.dsnPublic : undefined;
            resourceInputs["dsnSecret"] = state ? state.dsnSecret : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["rateLimitCount"] = state ? state.rateLimitCount : undefined;
            resourceInputs["rateLimitWindow"] = state ? state.rateLimitWindow : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
        } else {
            const args = argsOrState as SentryDefaultKeyArgs | undefined;
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rateLimitCount"] = args ? args.rateLimitCount : undefined;
            resourceInputs["rateLimitWindow"] = args ? args.rateLimitWindow : undefined;
            resourceInputs["dsnCsp"] = undefined /*out*/;
            resourceInputs["dsnPublic"] = undefined /*out*/;
            resourceInputs["dsnSecret"] = undefined /*out*/;
            resourceInputs["isActive"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["public"] = undefined /*out*/;
            resourceInputs["secret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["dsnSecret", "secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SentryDefaultKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SentryDefaultKey resources.
 */
export interface SentryDefaultKeyState {
    dsnCsp?: pulumi.Input<string>;
    dsnPublic?: pulumi.Input<string>;
    dsnSecret?: pulumi.Input<string>;
    isActive?: pulumi.Input<boolean>;
    /**
     * The name of the key
     */
    name?: pulumi.Input<string>;
    /**
     * The slug of the organization the key should be created for
     */
    organization?: pulumi.Input<string>;
    /**
     * The slug of the project the key should be created for
     */
    project?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    public?: pulumi.Input<string>;
    rateLimitCount?: pulumi.Input<number>;
    rateLimitWindow?: pulumi.Input<number>;
    secret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SentryDefaultKey resource.
 */
export interface SentryDefaultKeyArgs {
    /**
     * The name of the key
     */
    name?: pulumi.Input<string>;
    /**
     * The slug of the organization the key should be created for
     */
    organization: pulumi.Input<string>;
    /**
     * The slug of the project the key should be created for
     */
    project: pulumi.Input<string>;
    rateLimitCount?: pulumi.Input<number>;
    rateLimitWindow?: pulumi.Input<number>;
}
