"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = exports.SentryTeamMember = exports.SentryTeam = exports.SentryProjectSymbolSource = exports.SentryProjectSpikeProtection = exports.SentryProjectInboundDataFilter = exports.SentryProject = exports.SentryPlugin = exports.SentryOrganizationRepositoryGithub = exports.SentryOrganizationRepository = exports.SentryOrganizationMember = exports.SentryOrganizationCodeMapping = exports.SentryOrganization = exports.SentryNotificationAction = exports.SentryMetricAlert = exports.SentryKey = exports.SentryIssueAlert = exports.SentryIntegrationPagerDuty = exports.SentryIntegrationOpsgenie = exports.SentryDashboard = exports.SentryAllProjectsSpikeProtection = exports.Provider = exports.getSentryTeamOutput = exports.getSentryTeam = exports.getSentryProjectOutput = exports.getSentryProject = exports.getSentryOrganizationMemberOutput = exports.getSentryOrganizationMember = exports.getSentryOrganizationIntegrationOutput = exports.getSentryOrganizationIntegration = exports.getSentryOrganizationOutput = exports.getSentryOrganization = exports.getSentryMetricAlertOutput = exports.getSentryMetricAlert = exports.getSentryKeyOutput = exports.getSentryKey = exports.getSentryIssueAlertOutput = exports.getSentryIssueAlert = exports.getSentryDashboardOutput = exports.getSentryDashboard = exports.getSentryAllProjectsOutput = exports.getSentryAllProjects = exports.getSentryAllOrganizationMembersOutput = exports.getSentryAllOrganizationMembers = exports.getSentryAllKeysOutput = exports.getSentryAllKeys = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.getSentryAllKeys = null;
exports.getSentryAllKeysOutput = null;
utilities.lazyLoad(exports, ["getSentryAllKeys", "getSentryAllKeysOutput"], () => require("./getSentryAllKeys"));
exports.getSentryAllOrganizationMembers = null;
exports.getSentryAllOrganizationMembersOutput = null;
utilities.lazyLoad(exports, ["getSentryAllOrganizationMembers", "getSentryAllOrganizationMembersOutput"], () => require("./getSentryAllOrganizationMembers"));
exports.getSentryAllProjects = null;
exports.getSentryAllProjectsOutput = null;
utilities.lazyLoad(exports, ["getSentryAllProjects", "getSentryAllProjectsOutput"], () => require("./getSentryAllProjects"));
exports.getSentryDashboard = null;
exports.getSentryDashboardOutput = null;
utilities.lazyLoad(exports, ["getSentryDashboard", "getSentryDashboardOutput"], () => require("./getSentryDashboard"));
exports.getSentryIssueAlert = null;
exports.getSentryIssueAlertOutput = null;
utilities.lazyLoad(exports, ["getSentryIssueAlert", "getSentryIssueAlertOutput"], () => require("./getSentryIssueAlert"));
exports.getSentryKey = null;
exports.getSentryKeyOutput = null;
utilities.lazyLoad(exports, ["getSentryKey", "getSentryKeyOutput"], () => require("./getSentryKey"));
exports.getSentryMetricAlert = null;
exports.getSentryMetricAlertOutput = null;
utilities.lazyLoad(exports, ["getSentryMetricAlert", "getSentryMetricAlertOutput"], () => require("./getSentryMetricAlert"));
exports.getSentryOrganization = null;
exports.getSentryOrganizationOutput = null;
utilities.lazyLoad(exports, ["getSentryOrganization", "getSentryOrganizationOutput"], () => require("./getSentryOrganization"));
exports.getSentryOrganizationIntegration = null;
exports.getSentryOrganizationIntegrationOutput = null;
utilities.lazyLoad(exports, ["getSentryOrganizationIntegration", "getSentryOrganizationIntegrationOutput"], () => require("./getSentryOrganizationIntegration"));
exports.getSentryOrganizationMember = null;
exports.getSentryOrganizationMemberOutput = null;
utilities.lazyLoad(exports, ["getSentryOrganizationMember", "getSentryOrganizationMemberOutput"], () => require("./getSentryOrganizationMember"));
exports.getSentryProject = null;
exports.getSentryProjectOutput = null;
utilities.lazyLoad(exports, ["getSentryProject", "getSentryProjectOutput"], () => require("./getSentryProject"));
exports.getSentryTeam = null;
exports.getSentryTeamOutput = null;
utilities.lazyLoad(exports, ["getSentryTeam", "getSentryTeamOutput"], () => require("./getSentryTeam"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.SentryAllProjectsSpikeProtection = null;
utilities.lazyLoad(exports, ["SentryAllProjectsSpikeProtection"], () => require("./sentryAllProjectsSpikeProtection"));
exports.SentryDashboard = null;
utilities.lazyLoad(exports, ["SentryDashboard"], () => require("./sentryDashboard"));
exports.SentryIntegrationOpsgenie = null;
utilities.lazyLoad(exports, ["SentryIntegrationOpsgenie"], () => require("./sentryIntegrationOpsgenie"));
exports.SentryIntegrationPagerDuty = null;
utilities.lazyLoad(exports, ["SentryIntegrationPagerDuty"], () => require("./sentryIntegrationPagerDuty"));
exports.SentryIssueAlert = null;
utilities.lazyLoad(exports, ["SentryIssueAlert"], () => require("./sentryIssueAlert"));
exports.SentryKey = null;
utilities.lazyLoad(exports, ["SentryKey"], () => require("./sentryKey"));
exports.SentryMetricAlert = null;
utilities.lazyLoad(exports, ["SentryMetricAlert"], () => require("./sentryMetricAlert"));
exports.SentryNotificationAction = null;
utilities.lazyLoad(exports, ["SentryNotificationAction"], () => require("./sentryNotificationAction"));
exports.SentryOrganization = null;
utilities.lazyLoad(exports, ["SentryOrganization"], () => require("./sentryOrganization"));
exports.SentryOrganizationCodeMapping = null;
utilities.lazyLoad(exports, ["SentryOrganizationCodeMapping"], () => require("./sentryOrganizationCodeMapping"));
exports.SentryOrganizationMember = null;
utilities.lazyLoad(exports, ["SentryOrganizationMember"], () => require("./sentryOrganizationMember"));
exports.SentryOrganizationRepository = null;
utilities.lazyLoad(exports, ["SentryOrganizationRepository"], () => require("./sentryOrganizationRepository"));
exports.SentryOrganizationRepositoryGithub = null;
utilities.lazyLoad(exports, ["SentryOrganizationRepositoryGithub"], () => require("./sentryOrganizationRepositoryGithub"));
exports.SentryPlugin = null;
utilities.lazyLoad(exports, ["SentryPlugin"], () => require("./sentryPlugin"));
exports.SentryProject = null;
utilities.lazyLoad(exports, ["SentryProject"], () => require("./sentryProject"));
exports.SentryProjectInboundDataFilter = null;
utilities.lazyLoad(exports, ["SentryProjectInboundDataFilter"], () => require("./sentryProjectInboundDataFilter"));
exports.SentryProjectSpikeProtection = null;
utilities.lazyLoad(exports, ["SentryProjectSpikeProtection"], () => require("./sentryProjectSpikeProtection"));
exports.SentryProjectSymbolSource = null;
utilities.lazyLoad(exports, ["SentryProjectSymbolSource"], () => require("./sentryProjectSymbolSource"));
exports.SentryTeam = null;
utilities.lazyLoad(exports, ["SentryTeam"], () => require("./sentryTeam"));
exports.SentryTeamMember = null;
utilities.lazyLoad(exports, ["SentryTeamMember"], () => require("./sentryTeamMember"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "sentry:index/sentryAllProjectsSpikeProtection:SentryAllProjectsSpikeProtection":
                return new exports.SentryAllProjectsSpikeProtection(name, undefined, { urn });
            case "sentry:index/sentryDashboard:SentryDashboard":
                return new exports.SentryDashboard(name, undefined, { urn });
            case "sentry:index/sentryIntegrationOpsgenie:SentryIntegrationOpsgenie":
                return new exports.SentryIntegrationOpsgenie(name, undefined, { urn });
            case "sentry:index/sentryIntegrationPagerDuty:SentryIntegrationPagerDuty":
                return new exports.SentryIntegrationPagerDuty(name, undefined, { urn });
            case "sentry:index/sentryIssueAlert:SentryIssueAlert":
                return new exports.SentryIssueAlert(name, undefined, { urn });
            case "sentry:index/sentryKey:SentryKey":
                return new exports.SentryKey(name, undefined, { urn });
            case "sentry:index/sentryMetricAlert:SentryMetricAlert":
                return new exports.SentryMetricAlert(name, undefined, { urn });
            case "sentry:index/sentryNotificationAction:SentryNotificationAction":
                return new exports.SentryNotificationAction(name, undefined, { urn });
            case "sentry:index/sentryOrganization:SentryOrganization":
                return new exports.SentryOrganization(name, undefined, { urn });
            case "sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping":
                return new exports.SentryOrganizationCodeMapping(name, undefined, { urn });
            case "sentry:index/sentryOrganizationMember:SentryOrganizationMember":
                return new exports.SentryOrganizationMember(name, undefined, { urn });
            case "sentry:index/sentryOrganizationRepository:SentryOrganizationRepository":
                return new exports.SentryOrganizationRepository(name, undefined, { urn });
            case "sentry:index/sentryOrganizationRepositoryGithub:SentryOrganizationRepositoryGithub":
                return new exports.SentryOrganizationRepositoryGithub(name, undefined, { urn });
            case "sentry:index/sentryPlugin:SentryPlugin":
                return new exports.SentryPlugin(name, undefined, { urn });
            case "sentry:index/sentryProject:SentryProject":
                return new exports.SentryProject(name, undefined, { urn });
            case "sentry:index/sentryProjectInboundDataFilter:SentryProjectInboundDataFilter":
                return new exports.SentryProjectInboundDataFilter(name, undefined, { urn });
            case "sentry:index/sentryProjectSpikeProtection:SentryProjectSpikeProtection":
                return new exports.SentryProjectSpikeProtection(name, undefined, { urn });
            case "sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource":
                return new exports.SentryProjectSymbolSource(name, undefined, { urn });
            case "sentry:index/sentryTeam:SentryTeam":
                return new exports.SentryTeam(name, undefined, { urn });
            case "sentry:index/sentryTeamMember:SentryTeamMember":
                return new exports.SentryTeamMember(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sentry", "index/sentryAllProjectsSpikeProtection", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryDashboard", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryIntegrationOpsgenie", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryIntegrationPagerDuty", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryIssueAlert", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryKey", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryMetricAlert", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryNotificationAction", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryOrganization", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryOrganizationCodeMapping", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryOrganizationMember", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryOrganizationRepository", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryOrganizationRepositoryGithub", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryPlugin", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryProject", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryProjectInboundDataFilter", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryProjectSpikeProtection", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryProjectSymbolSource", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryTeam", _module);
pulumi.runtime.registerResourceModule("sentry", "index/sentryTeamMember", _module);
pulumi.runtime.registerResourcePackage("sentry", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:sentry") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
