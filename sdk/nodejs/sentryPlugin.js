"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SentryPlugin = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Sentry Plugin resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sentry from "@pulumiverse/sentry";
 *
 * // Create a plugin
 * const _default = new sentry.SentryPlugin("default", {
 *     config: {
 *         webhook: "slack://webhook",
 *     },
 *     organization: "my-organization",
 *     plugin: "slack",
 *     project: "web-app",
 * });
 * ```
 */
class SentryPlugin extends pulumi.CustomResource {
    /**
     * Get an existing SentryPlugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SentryPlugin(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SentryPlugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SentryPlugin.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["plugin"] = state ? state.plugin : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.plugin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plugin'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["plugin"] = args ? args.plugin : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SentryPlugin.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SentryPlugin = SentryPlugin;
/** @internal */
SentryPlugin.__pulumiType = 'sentry:index/sentryPlugin:SentryPlugin';
//# sourceMappingURL=sentryPlugin.js.map